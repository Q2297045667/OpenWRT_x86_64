name: Build releases

on:
  workflow_dispatch:
    inputs:
      device:
        description: '选择构建设备'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
      version:
        description: '选择构建版本'
        required: true
        default: 'snapshot-24.10'
        type: choice
        options:
          #  - 'release'
          - 'snapshot-24.10'
      ccache:
        description: '启用缓存（使用缓存加速下一个构建）'
        type: boolean
        default: false
      lan_addr:
        description: '设置默认LAN地址'
        required: true
        default: '10.0.0.1'
        type: string
      build_options:
        description: '构建选项（用空格分隔多个选项）'
        required: false
        default: 'BUILD_FAST=y ENABLE_BPF=y ENABLE_LRNG=y ENABLE_LTO=y ENABLE_MOLD=y KERNEL_CLANG_LTO=y ENABLE_DPDK=y USE_GCC15=y'
        type: string

jobs:
  build:
    name: 构建 ${{ github.event.inputs.device }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    steps:
      - name: 校验
        continue-on-error: true
        uses: actions/checkout@main
        with:
          path: r4s_build_script

      - name: 设置变量
        run: |
          sudo timedatectl set-timezone 'Asia/Shanghai'
          git config --global user.name 'actions'
          git config --global user.email 'action@github.com'
          echo build_dir="/builder" >> "$GITHUB_ENV"
          [ "${{ github.event.inputs.version }}" = release ] && echo build_version="rc2" >> "$GITHUB_ENV" || echo build_version="dev" >> "$GITHUB_ENV"

      - name: 显示系统
        run: |
          echo -e "\n\e[1;32mCPU:\e[0m"
          echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
          echo -e "\n\e[1;32mMemory:\e[0m"
          free -h
          echo -e "\n\e[1;32mStorage:\e[0m"
          df -Th / /mnt
          echo -e "\n\e[1;32mSystem:\e[0m"
          lsb_release -a
          echo -e "\n\e[1;32mKernel:\e[0m"
          uname -a
          echo

      - name: 安装Caddy服务器
        run: |
          sudo curl -sL -o /usr/bin/caddy https://github.com/sbwml/r4s_build_script/releases/download/caddy/caddy
          sudo chmod 755 /usr/bin/caddy
          echo ":8080 {" > caddyfile
          echo "    root * $(pwd)/r4s_build_script" >> caddyfile
          echo "    file_server browse" >> caddyfile
          echo "}" >> caddyfile
          sudo /usr/bin/caddy start --config caddyfile --adapter caddyfile

      - name: 可用磁盘空间
        uses: sbwml/actions@free-disk
        with:
          build-mount-path: /builder

      - name: 构建系统设置
        uses: sbwml/actions@openwrt-build-setup

      - name: 安装LLVM
        uses: sbwml/actions@install-llvm

      - name: 恢复缓存
        if: ${{ github.event.inputs.ccache == 'true' && github.event.inputs.device != 'armv8' && github.event.inputs.device != 'nanopi-r4s' }}
        uses: actions/cache/restore@v4
        with:
          path: /builder/.ccache
          key: openwrt-24.10-${{ github.event.inputs.device }}-ccache

      - name: 恢复缓存（发布版本）
        if: ${{ github.event.inputs.ccache == 'true' && github.event.inputs.device == 'armv8' || github.event.inputs.device == 'nanopi-r4s' }}
        continue-on-error: true
        working-directory: /builder
        run: |
          curl -s https://api.github.com/repos/${{ github.repository }}/releases | grep 'browser_download_url' | grep ccache | grep ${{ github.event.inputs.device }} | awk -F '"' '{print $4}' | grep -v '^$' | xargs -n 1 wget -q
          cat ${{ github.event.inputs.device }}.tar.* | tar -xf - || true
          rm -rf ${{ github.event.inputs.device }}.tar.* || true
          [ -d .ccache ] && cache_size=$(du -sb .ccache | awk '{print $1}') || cache_size=0
          cache_size_mb=$(echo "scale=0; ${cache_size} / (1024 * 1024)" | bc)
          echo "Cache Size: ~${cache_size_mb} MB (${cache_size} B)"
          echo "Cache restored successfully"
          echo "Cache restored from key: ${{ github.event.inputs.device }}"

      - name: 编译OpenWRT
        working-directory: /builder
        id: compile
        continue-on-error: true
        run: |
          export ${{ github.event.inputs.build_options }} LAN=${{ github.event.inputs.lan_addr }} USE_GCC15=y
          [ ${{ github.event.inputs.ccache }} = 'true' ] && export ENABLE_CCACHE=y
          bash <(curl -sS http://127.0.0.1:8080/build.sh) ${{ env.build_version }} ${{ github.event.inputs.device }}
          cd openwrt
          if [ "${{ github.event.inputs.version }}" = release ]; then
            tags=OpenWrt-$(git describe --abbrev=0 --tags)
          else
            tags=snapshot-24.10-$(git log -n 1 --date=format:"%Y%m%d" --format="%cd")-$(git log --pretty=format:"%h" -1)
          fi
          echo "latest_release=$tags" >>$GITHUB_ENV

      - name: 编译失败后的大量日志
        working-directory: /builder
        if: steps.compile.outcome == 'failure'
        run: |
          cd openwrt
          make V=s

      - name: 删除缓存
        if: ${{ github.event.inputs.ccache == 'true' && github.event.inputs.device != 'armv8' && github.event.inputs.device != 'nanopi-r4s' }}
        continue-on-error: true
        working-directory: /builder
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          gh cache delete openwrt-24.10-${{ github.event.inputs.device }}-ccache || true

      - name: 保存缓存
        if: ${{ github.event.inputs.ccache == 'true' && github.event.inputs.device != 'armv8' && github.event.inputs.device != 'nanopi-r4s' }}
        continue-on-error: true
        uses: actions/cache/save@v4
        with:
          path: /builder/.ccache
          key: openwrt-24.10-${{ github.event.inputs.device }}-ccache

      - name: 创建缓存tar文件
        if: ${{ github.event.inputs.ccache == 'true' && github.event.inputs.device == 'armv8' || github.event.inputs.device == 'nanopi-r4s' }}
        continue-on-error: true
        working-directory: /builder
        run: |
          mkdir -p ccache
          tar cf - .ccache | split -d -b 1800m - ccache/${{ github.event.inputs.device }}.tar.

      - name: 上传缓存（发布版本 - ccache）
        if: ${{ github.event.inputs.ccache == 'true' && github.event.inputs.device == 'armv8' || github.event.inputs.device == 'nanopi-r4s' }}
        continue-on-error: true
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ccache
          allowUpdates: true
          tag: ccache
          commit: master
          replacesArtifacts: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            ${{ env.build_dir }}/ccache/*

      - name: 准备固件文件
        working-directory: /builder
        run: |
          mkdir -p rom info
          if [ "${{ github.event.inputs.device }}" = "nanopi-r4s" ]; then
            cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
            cp -a openwrt/bin/targets/rockchip/*/*-r4s.manifest info/manifest.txt
            cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
            cd rom && sha256sum *gz > ../info/sha256sums.txt
          elif [ "${{ github.event.inputs.device }}" = "nanopi-r5s" ]; then
            cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
            cp -a openwrt/bin/targets/rockchip/*/*.manifest info/manifest.txt
            cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
            cd rom && sha256sum *gz > ../info/sha256sums.txt
          elif [ "${{ github.event.inputs.device }}" = "x86_64" ]; then
            cp -a openwrt/bin/targets/x86/*/*-ext4-combined-efi.img.gz rom/
            cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz rom/
            cp -a openwrt/bin/targets/x86/*/*-generic-rootfs.tar.gz rom/
            cp -a openwrt/bin/targets/x86/*/*-x86-64-generic.manifest info/manifest.txt
            cp -a openwrt/bin/targets/x86/*/config.buildinfo info/config.buildinfo
            cd rom && sha256sum *gz > ../info/sha256sums.txt
          elif [ "${{ github.event.inputs.device }}" = "netgear_r8500" ]; then
            cp -a openwrt/bin/targets/bcm53xx/generic/*-bcm53xx-generic-netgear_r8500-squashfs.chk rom/
            cp -a openwrt/bin/targets/bcm53xx/generic/*.manifest info/manifest.txt
            cp -a openwrt/bin/targets/bcm53xx/generic/config.buildinfo info/config.buildinfo
            cd rom && sha256sum * > ../info/sha256sums.txt
          elif [ "${{ github.event.inputs.device }}" = "armv8" ]; then
            tar zcf rom/u-boot-qemu_armv8.tar.gz -C openwrt/bin/targets/armsr/armv8*/ ./u-boot-qemu_armv8
            cp -a openwrt/bin/targets/armsr/armv8*/*-generic-initramfs-kernel.bin rom/
            cp -a openwrt/bin/targets/armsr/armv8*/*-generic-kernel.bin rom/
            cp -a openwrt/bin/targets/armsr/armv8*/*-generic-ext4-combined-efi.img.gz rom/
            cp -a openwrt/bin/targets/armsr/armv8*/*-generic-squashfs-combined-efi.img.gz rom/
            cp -a openwrt/bin/targets/armsr/armv8*/*-rootfs.tar.gz rom/
            cp -a openwrt/bin/targets/armsr/armv8*/*.manifest info/manifest.txt
            cp -a openwrt/bin/targets/armsr/armv8*/config.buildinfo info/config.buildinfo
            cd rom && sha256sum * > ../info/sha256sums.txt
          fi

      - name: 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.device }}-openwrt-${{ env.latest_release }}
          path: ${{ env.build_dir }}/rom/*

      - name: 创建发布
        continue-on-error: true
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.latest_release }}
          allowUpdates: true
          tag: ${{ env.latest_release }}
          commit: master
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.build_dir }}/rom/*
